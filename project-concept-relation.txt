1Ô∏è‚É£ Serialization & Deserialization
Serialization ‚Üí Converts Python objects (models, dicts) into JSON format.
Deserialization ‚Üí Converts JSON data back into Python objects.

Usage:
Use Serializer for manual control over data transformation.
Use ModelSerializer for automatic field generation from models.


2Ô∏è‚É£ CRUD Operations (Serialization & Deserialization)
Serialization is used for GET (reading data from DB).
Deserialization is used for POST, PUT, PATCH (writing/updating data in DB).

Usage:
Use ModelSerializer for automatic CRUD handling.
Use Serializer for custom object transformations.


3Ô∏è‚É£ Validation in DRF
Field Level Validation ‚Üí Validates a single field (e.g., min length, unique email).
Object Level Validation ‚Üí Validates multiple fields together.
Validators ‚Üí Custom reusable validation functions or classes.

Usage:
Use validators for custom logic that can be reused across serializers.
Use field-level validation for simple checks (e.g., length).
Use object-level validation for complex inter-field conditions.


4Ô∏è‚É£ ModelSerializer (Advanced Serializer Wrapper)
ModelSerializer ‚Üí Auto-generates serializer fields from a Django model.
Includes:
create() ‚Üí Calls Model.objects.create().
update() ‚Üí Calls Model.objects.filter(pk=id).update().

Usage:
Use ModelSerializer when mapping a model to a serializer for CRUD.
Customize create() and update() methods for custom ORM logic.


5Ô∏è‚É£ Function-Based APIView (FBV)
@api_view decorator simplifies request/response handling.
Usage:

Use for simple, small APIs where class-based views (CBVs) are overkill.


6Ô∏è‚É£ APIView Class (Advanced View Wrapper)
Subclass of Django‚Äôs View class.
Provides request parsing and response handling.

Usage:
Use APIView when you need more control than FBVs but want to keep logic structured.


7Ô∏è‚É£ GenericAPIView
Extends APIView, adding reusable behaviors like filtering, pagination, and lookup fields.
Key Attributes:
queryset ‚Üí Defines which model instances to use.
serializer_class ‚Üí Defines the serializer for handling data.
Key Methods:
get_queryset() ‚Üí Retrieves data from DB (calls ORM).
get_object() ‚Üí Fetches a single object from DB.
get_serializer() ‚Üí Returns a serializer instance for validation/serialization.

Usage:
Use GenericAPIView when needing queryset filtering & pagination.
Combine with mixins to add specific behaviors (like retrieving/updating objects).


8Ô∏è‚É£ Mixins (Reusable View Logic)
CreateModelMixin ‚Üí Handles object creation (Model.objects.create()).
RetrieveModelMixin ‚Üí Fetches a single object (Model.objects.get()).
UpdateModelMixin ‚Üí Updates an object (Model.objects.filter(pk=id).update()).
DestroyModelMixin ‚Üí Deletes an object (Model.objects.filter(pk=id).delete()).
ListModelMixin ‚Üí Lists objects (Model.objects.all()).

Usage:
Use mixins to quickly add CRUD operations to views without repeating code.
Combine with GenericAPIView to build custom API behavior.


9Ô∏è‚É£ Concrete View Classes (Prebuilt Views for CRUD)
Inherits both GenericAPIView & Mixins, providing complete CRUD functionality.
Examples:
ListCreateAPIView ‚Üí GET (list), POST (create).
RetrieveUpdateDestroyAPIView ‚Üí GET (retrieve), PUT/PATCH (update), DELETE.

Usage:
Use when you need full CRUD functionality with minimal code.


üîü ViewSet & ModelViewSet
ViewSet ‚Üí Flexible API class where you manually define request handling (list(), retrieve(), etc.).
ModelViewSet ‚Üí Auto-handles CRUD operations without extra code.

Usage:
Use ViewSet for custom behavior (e.g., no delete, custom filtering).
Use ModelViewSet for standard CRUD (less code, more automation).



