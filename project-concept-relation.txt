Follow chronology if learning from beginning:

gs1 -> Serialization
gs2 -> Deserialization
gs3 -> Serialization & Deserialization together
gs4 -> CRUD (S&D)


Validation:
    1. Field Level Validation : Validation for a single field.
    2. Object Level Validation: Validation for multiple fields.
    3. Validators: Validator Functions and Validator Classes can be used to create reusable validating logics.

    Priority:
    1. Validators
    2. Field Level Validation
    3. Object Level Validation

ModelSerializer Class: (pro version of Seralizer class, essentially a wrapper)
    Automatically generates set of fields that correspond to the Model. Includes create() and update() implementations.

ModelSerializer Validation:
    Show how validation is done on ModelSerializer class. Quite similar to validating Serializer class.

Function based APIView: (pro version of creating views, essentially a wrapper) (from rest_framework.decorators import api_view)
    Manage requests and responses cleanly. (less code) 


APIView Class:
    It is a subclass of django's View class -> Provides Requests & Response instances.

Class based APIViews: ""


Project -> genericAPIView & genericAPIView_2
Generic APIView:
    This class extends APIView class, adding commonly required behaviors.
    Attributes:
        queryset - The set of objects that this view will operate upon.
        serializer_class - The class used for validating and deserializing input, and serializing output.
        lookup_field - The field used to look up individual model instances.
        lookup_url_kwarg - The URL keyword argument that corresponds to the lookup field.
        pagination_class - The class used for paginating the results.
        filter_backends - The list of filter backend classes used for filtering the queryset.
    Methods:
        get_queryset(self) - Returns the queryset that will be used to retrieve objects.
        get_object(self) - Returns the object the view is displaying.
        get_serializer_class(self) - Returns the class to be used for the serializer.
        get_serializer_context(self) - Returns the context that will be passed to the serializer.
        get_serializer() - Returns serializer instance for I/O
        filter_queryset(self, queryset) - Filters the given queryset.

Mixins:
    Mixins are reusable classes that provide specific behavior to views.
    Commonly used mixins include:
        CreateModelMixin - Provides a method to handle creating objects.
        RetrieveModelMixin - Provides a method to handle retrieving a single object.
        UpdateModelMixin - Provides a method to handle updating objects.
        DestroyModelMixin - Provides a method to handle deleting objects.
        ListModelMixin - Provides a method to handle listing objects.
    These mixins can be combined with GenericAPIView to create views with specific behaviors.

Project - concreteViewClass
    





